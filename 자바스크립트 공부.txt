JS 문법정리

document.write(' ') : 자바스크립트를 이용해서 웹페이지에 텍스트를 출력한다.

연산 Math.~()

변수선언 var a;

주석 c++과 동일

비교 : ==말고 ===사용하자

조건,반복문 동일

함수: 방법 1. function 함수이름(인자){};
       방법 2. var 함수이름 = function (인자){};

배열: var 이름 = [a,b,c];
배열 메소드는 구글링이나 생활코드 사전 참조

객체 : 여기서의 객체는 파이썬의 딕셔너리와 같은 개념
 방법 1. var 객체이름 = {'hwanhee' : 24, 'chanhee' : 20};
  (앞이 key, 뒤가 value.)
 방법 2. var 객체이름 = new Object();
 추가 할 때 는 
 객체이름['hwanhee'] = 24; // 인덱스 연산자 생각하면 쉬움.
 객체에 접근할 때에는 
 1. 객체이름.hwanhee
 2. 객체이름['hwanhee']

반복문에서 객체활용
for (key in 객체이름)
{ document.write("key : " +key+ ", value : " +객체이름[key]+ "<br />")};
=> key라는 변수에 객체의 key값을 하나씩 담음

모듈: 자주 사용되는 코드를 별도의 파일로 만들어서 필요할 때마다 재활용할 수 있다. 
모듈화 방법(웹브라우저(클라이언트)환경의 경우) - node.js에서는 다름
head부분에
<script src = "file.js"></script> // C++에서 전처리기에 쓰는 include와 같은 개념

정규표현식
var pattern = /a/;
pattern.exec('abcde');
=> ["a"]
pattern.test('bcde');
=> false

var str = 'abcd';
str.match(pattern);
=> ["a"]

str.replace(pattern, 'A');
=>Abcd

정규표현식의 옵션
1. i를 붙이면 대소문자 구분하지 않는다.
var pattern = /a/i;

2. g를 붙이면 검색된 모든 결과를 리턴한다.
var pattern = /a/g;

'abcda'.match(pattern);
=> ["a","a"]

pattern = (\w+)\s(\w+)
=> \w+는 하나이상의 문자
    ()는 그룹
    \s 는 공백
하나의 패턴 완성 // 캡쳐
ex) hello world, 
    coding everybody

'coding everybody'.replace(pattern, "$2, $1"); //치환
=> everybody, coding
$1은 첫번째그룹 $2는 두번째 그룹

치환
아래 코드는 본문 중의 URL을 링크 html 태그로 교체한다. 

var urlPattern = /\b(?:https?):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*/gim;
var content = '생활코딩 : http://opentutorials.org/course/1 입니다. 네이버 : http://naver.com 입니다. ';
var result = content.replace(urlPattern, function(url){
    return '<a href="'+url+'">'+url+'</a>';
});
console.log(result);

=> 생활코딩 : <a href="http://opentutorials.org/course/1">http://opentutorials.org/course/1</a> 입니다. 네이버 : <a href="http://naver.com">http://naver.com</a> 입니다.

정규표현식은 따로 공부!

자바스크립트에서 변수의 유효범위는
함수에 대한 유효범위만을 제공한다. // C++은 블럭{}에 대한 유효범위 제공.

콜백함수
함수의 인자로 들어가는 함수(값으로써 함수가 사용됨)

클로저 - 자바스크립트가 private한 변수를 사용할 수 있게 하는 좋은 메커니즘.
내부함수내에서 외부함수의 지역변수에 접근 가능하다.
       function movie(title)
       {
           return {
               get_title : function(){return title},
               set_title : function(_title){title = _title}
           }
       }

       ghost = movie('transfomer');
       alert(ghost.get_title());
       ghost.set_title("TransFomer");
       alert(ghost.get_title());

클로저 다시공부.. 이해안됨\

매개변수란 함수정의부분에 사용하는 변수 (parameters)
인자란 함수 호출할때 매개변수에 들어가는 값 (arguments)

js는 함수의 정의된 매개변수의 개수가 호출될때의 인자와 같지 않아도됨.
ex) function myfunc (a, b){}
   => myfunc() 가능 myfunc(1,2,3)가능

arguments
함수를 정의할때 인자를 정해놓지않고 arguments라는 유사배열에 인자를 받아
사용가능 -> js의 신기한 기능 
function sum(){
    var i, _sum = 0;    
    for(i = 0; i < arguments.length; i++){ //유사배열이라 .length로 길이 알아냄
        document.write(i+' : '+arguments[i]+'<br />');
        _sum += arguments[i];
    }   
    return _sum;
}
document.write('result : ' + sum(1,2,3,4));

매개변수의 수
함수이름.length 하면 함수의 매개변수의 개수 리턴
arguments.length 하면 함수 호출때 입력된 인자의 개수 리턴

만약 함수를 정의 할 때 반드시 매개변수의 개수와 같은 수의 인자를 받고싶다?
=> myfunc.length 와 arguments.length 비교함.

함수 호출시
sum(1,2);
sum(null, [1,2]); 둘다 가능

<script src = "파일.js"></script>
js파일을 위치시킬때는 body문이 다 끝났을때 넣자
만약 head태그에 넣을려면 
js코드에 window.onload = function(){
} 추가




document.getElement* 의 리턴값이 단수일경우 HTML